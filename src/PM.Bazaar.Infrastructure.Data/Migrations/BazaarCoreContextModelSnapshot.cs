// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PM.BazaarCore.Infrastructure.Data.Contexts;

namespace PM.BazaarCore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BazaarCoreContext))]
    partial class BazaarCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Ad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(5000);

                    b.Property<Guid>("IdAdvertiser")
                        .HasColumnName("id_advertiser");

                    b.Property<Guid>("IdCategory")
                        .HasColumnName("id_category");

                    b.Property<double>("Price")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("IdAdvertiser");

                    b.HasIndex("IdCategory");

                    b.ToTable("ad");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.AdImage", b =>
                {
                    b.Property<Guid>("IdImage")
                        .HasColumnName("id_image");

                    b.Property<Guid>("IdAd")
                        .HasColumnName("id_ad");

                    b.HasKey("IdImage", "IdAd");

                    b.HasIndex("IdAd");

                    b.ToTable("ad_image");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Advertiser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("IdAvatar")
                        .HasColumnName("id_avatar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnName("registration_date");

                    b.HasKey("Id");

                    b.HasIndex("IdAvatar");

                    b.ToTable("advertiser");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnName("bytes");

                    b.HasKey("Id");

                    b.ToTable("image");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("IdAd")
                        .HasColumnName("id_ad");

                    b.Property<Guid>("IdUser")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdAd");

                    b.HasIndex("IdUser");

                    b.ToTable("question");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("IdAdvertiser")
                        .HasColumnName("id_advertiser");

                    b.HasKey("Id");

                    b.HasIndex("IdAdvertiser");

                    b.ToTable("response");
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(60);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnName("normalized_email")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnName("claim_value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("account_claim");
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountLogin", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.HasKey("AccountId", "LoginProvider", "ProviderKey");

                    b.ToTable("account_login");
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("account_role");
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Ad", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Advertiser", "Advertiser")
                        .WithMany("Ads")
                        .HasForeignKey("IdAdvertiser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PM.BazaarCore.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.AdImage", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Ad", "Ad")
                        .WithMany("Pictures")
                        .HasForeignKey("IdAd")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PM.BazaarCore.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Advertiser", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("IdAvatar")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Question", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Ad", "Ad")
                        .WithMany("Questions")
                        .HasForeignKey("IdAd")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PM.BazaarCore.Domain.Entities.Advertiser", "User")
                        .WithMany("Questions")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Domain.Entities.Response", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Question", "Question")
                        .WithOne("Response")
                        .HasForeignKey("PM.BazaarCore.Domain.Entities.Response", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PM.BazaarCore.Domain.Entities.Advertiser", "Advertiser")
                        .WithMany("Responses")
                        .HasForeignKey("IdAdvertiser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account", b =>
                {
                    b.HasOne("PM.BazaarCore.Domain.Entities.Advertiser", "Advertiser")
                        .WithOne()
                        .HasForeignKey("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountClaim", b =>
                {
                    b.HasOne("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account")
                        .WithMany("Claims")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountLogin", b =>
                {
                    b.HasOne("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account")
                        .WithMany("Logins")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.AccountRole", b =>
                {
                    b.HasOne("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PM.BazaarCore.Infrastructure.CrossCutting.Identity.Entities.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
